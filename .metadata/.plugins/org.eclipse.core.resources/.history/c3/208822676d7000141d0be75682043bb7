package com.UndefinedParameter.app.core;

import java.util.ArrayList;

/*
 * Wrapper class for the quiz object.
 */
public class Quiz {

	private int quizId;
	private int creatorId;
	private int difficulty;
	private int rating;
	private String description;
	private int time;
	
	private ArrayList<Question> questions;
	
	public int questionPosition = 0;
	
	public Quiz() {
		questions = new ArrayList<Question>();
	}
	
	public Quiz(ArrayList<Question> questions) {
		this.questions = questions;
	}
	
	public int getQuestionCount() {
		return questions.size();
	}
	
	public Question[] getQuestions() {
		return questions.toArray(new Question[questions.size()]);
	}
	
	public void setQuestions(ArrayList<Question> questions) {
		this.questions = (ArrayList<Question>)questions.clone();
	}
	
	public void addQuestion(Question question) {
		questions.add(question);
	}
	
	public int getQuizId() {
		return quizId;
	}
	public void setQuizId(int quizId) {
		this.quizId = quizId;
	}
	public int getCreatorId() {
		return creatorId;
	}
	public void setCreatorId(int creatorId) {
		this.creatorId = creatorId;
	}
	public int getDifficulty() {
		return difficulty;
	}
	public void setDifficulty(int difficulty) {
		this.difficulty = difficulty;
	}
	public int getRating() {
		return rating;
	}
	public void setRating(int rating) {
		this.rating = rating;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public int getTime() {
		return time;
	}
	public void setTime(int time) {
		this.time = time;
	}
	
	public Question getNextQuestion() throws Exception {
		if(questions == null)
			throw new Exception("Questions are empty, please add first");
		if(questionPosition >= questions.size()) {
			return questions.get(questionPosition);
		}
		else {
			return questions.get(questionPosition++);
		}
	}
	
	public Question getPreviousQuestion() throws Exception {
		if(questions == null)
			throw new Exception("Questions are empty, please add first");
		if(questionPosition <= 0) {
			return questions.get(questionPosition);
		}
		else {
			return questions.get(questionPosition--);
		}
	}
	
	public Question getCurrentQuestion() {
		return questions.get(questionPosition);
	}

}
